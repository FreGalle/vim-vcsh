" Register and configure plugins
runtime plugins.vim

" Load filetype settings, plugins and maps
filetype plugin indent on

" Use syntax highlighting
syntax enable

colorscheme gruvbox
set background=dark

" Set default indent settings; tweak on a per-filetype basis
set autoindent    " Use indent of previous line on new lines
set expandtab     " Use spaces instead of tabs
set shiftround    " Indents to multiples of shiftwidth
set shiftwidth=2  " Spaces used for (auto)indent
set smarttab      " Indents by shiftwidth at start of line
set tabstop=2     " Spaces a tab counts for

" Automatically re-read a changed but unedited file
set autoread

" Let me backspace over pretty much anything
set backspace+=eol     " Line breaks
set backspace+=indent  " Spaces from 'autoindent'
set backspace+=start   " The start of current insertion

" Indent wrapped lines if supported
if exists('+breakindent')
  set breakindent
  set cpoptions+=n  " Looks better when using cursorline
endif

" Clear default 'comments' value, let the filetype handle it
set comments=

" Add completion options
if exists('+completeopt')
  set completeopt+=longest  " Insert longest common substring
  set completeopt+=menuone  " Show the menu even if only one match
endif

" Give me a prompt instead of just rejecting risky :write, :saveas
set confirm

" Adjust diff mode settings
set diffopt+=vertical            " Start diff mode using vertical splits
set diffopt+=indent-heuristic    " Use indent heuristic for internal diff engine
set diffopt+=algorithm:patience  " Use patience algorithm for internal diff engine

" Show as much as possible of the last line
set display+=lastline

" Always use UTF-8
set encoding=utf-8

" Set characters used for statuslines and vertical separators
set fillchars=vert:\|,stl:\-,stlnc:\ ,fold:-,diff:┄

" Adjust automatic formatting
set formatoptions+=c  " Wrap comments using 'textwidth'
set formatoptions+=r  " Insert comment leader upon <Enter>
set formatoptions+=j  " Delete comment leaders when joining lines
set formatoptions+=q  " Allow formatting of comments with "gq"
set formatoptions+=n  " Recognize numbered lists
set formatoptions+=l  " Don't break a long lines in insert mode
set formatoptions+=1  " Don't break a line after a one-letter word

" I prefer to use ripgrep whenever possible
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat^=%f:%l:%c:%m
endif

" Allow buffers to have changes without being displayed
set hidden

" Keep much more command and search history
set history=2000

" Highlight completed searches
set hlsearch

" Show search matches while typing
set incsearch

" Search ignores case by default; use \C to override
set ignorecase

" Search-and-replace incrementally in-place
if has ('nvim')
  set inccommand=nosplit
endif

" Don't assume I'm editing C; let the filetype handle it
set include=

" Don't join lines with two spaces at the end of sentences
set nojoinspaces

" Always show a statusline, even with just one window
set laststatus=2

" Don't redraw the screen during batch execution
set lazyredraw

" Break lines at word boundaries
set linebreak

" Define extra 'list' display characters
set listchars-=eol:$       " Remove default eol entry
set listchars+=extends:>   " Unwrapped text to screen right
set listchars+=precedes:<  " Unwrapped text to screen left
set listchars+=tab:›\      " Tab characters, preserve width
set listchars+=trail:·     " Trailing spaces
set listchars+=nbsp:·      " Non-breaking spaces

" Configure leader and local-leader keys
let mapleader=","
let maplocalleader="\\"

" Enable usage of the mouse in all modes
set mouse=a

" Treat numbers with a leading zero as decimal, not octal
set nrformats-=octal

" Don't show line numbers by default; more screen real estate
set nonumber

" Toggle 'paste' mode to insert a copied piece of text literally
set pastetoggle=<F3>

" Options for file search with gf/:find
set path-=/usr/include  " Let the C/C++ filetypes set that
set path+=**            " Search current directory's whole tree

" Show file position in command line
set ruler

" Always show at least a couple of lines of context
set scrolloff=5

" Make sessions usable
if exists('+sessionoptions')
  set sessionoptions-=localoptions  " No buffer options or mappings
  set sessionoptions-=options       " No global options or mappings
endif

" Indicator to use at beginning of wrapped rows
let &showbreak='↳ '

" Show command while I'm typing it
set showcmd

" Show matching bracket briefly upon insert
set showmatch

" Show mode I'm in at the bottom of the screen
set showmode

" Scroll at least a couple of columns horizontally
set sidescroll=1
set sidescrolloff=10

" Searches are case-sensitive when containing a case
set smartcase

" New windows go below or to the right of a split
set splitright
set splitbelow

" Don't try to highlight lines this long
set synmaxcol=800

" Recognize hidden tags files as well
set tags +=./.tags,.tags

" Use 24-bit colors
set termguicolors

" Break lines longer than 79 characters
set textwidth=79

" Disable timeout; I don't like having to wait
set notimeout

" Enable timeout on key codes; <esc> exits Insert mode quickly
set ttimeout
set ttimeoutlen=50

" Shorter delay for writing to swap file
set updatetime=250

" Let me move beyond buffer text in visual block mode
if exists('+virtualedit')
  set virtualedit+=block
endif

" Wildmenu settings; see also plugin/wildignore.vim
set wildmenu               " Use wildmenu
set wildmode=list:longest  " Tab press completes and lists
set wildignorecase         " Case insensitive
set wildcharm=<C-z>        " Set for use in mappings to invoke completion

" By default don't open files with line-wrapping
set nowrap

" Searches wrap around the end of the file
set wrapscan

"
" Mappings from here on on
"

" Let space function as colon
map <Space> :

" Prevents from going into Ex-mode accidentally
nnoremap Q <Nop>

" Use . in visual mode
vnoremap . :norm.<CR>

" Make < and > keep the selection
vnoremap < <gv
vnoremap > >gv

" Stack normal/visual/select <Leader><Space> to clear search highlight
nnoremap <silent> <Leader><Space> :<C-U>nohlsearch<CR>
vnoremap <silent> <Leader><Space> :<C-U>nohlsearch<CR>gv

" Remap normal/visual & to preserve substitution flags
nnoremap <silent> & :&&<CR>
xnoremap <silent> & :&&<CR>

" Cycle through quicklist/:helpgrep items
nnoremap [c :cprevious<CR>
nnoremap ]c :cnext<CR>
" Cycle through location list items
nnoremap [l :lprevious<CR>
nnoremap ]l :lnext<CR>
" Cycle through git changes
nmap [h <Plug>GitGutterPrevHunk
nmap ]h <Plug>GitGutterNextHunk

" Remap insert Ctrl-C to undo the escaped insert operation
imap <C-C> <Plug>(InsertCancel)

" Map double Ctrl-K in insert mode to search digraph names
imap <C-K><C-K> <Plug>(DigraphSearch)

" Start interactive EasyAlign for a motion/text object (e.g. gaip) or in visual
" mode (e.g. vipga)
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" <Leader>b opens the list of buffers
nnoremap <Leader>b :<C-U>Buffers<CR>

" <Leader>e forces a buffer to be editable
nnoremap <Leader>e :<C-U>setlocal modifiable noreadonly undofile undolevels=50<CR>

" <Leader>f opens the fuzzy file finder
nnoremap <Leader>f :<C-U>Files<CR>

" <Leader>g changes directory to the current file's location (window)
nnoremap <Leader>g :<C-U>lcd %:h<CR>:pwd<CR>

" <Leader>G changes directory to the current file's location
nnoremap <Leader>G :<C-U>cd %:h<CR>:pwd<CR>

" <Leader>l toggles showing tab, end-of-line, and trailing whitespace
nnoremap <Leader>l :<C-U>setlocal list! list?<CR>
xnoremap <Leader>l :<C-U>setlocal list! list?<CR>gv

" <Leader>p pasts from the system clipboard
nnoremap <Leader>p "+p
xnoremap <Leader>p "+p

" <Leader>q closes the current window
nnoremap <Leader>q <C-w>q
xnoremap <Leader>q <C-w>qgv

" <Leader>s transforms the number under the cursor into a duration in seconds
noremap <Leader>s :ToSecDuration<CR>

" <Leader>t transforms the number under the cursor into a timestamp
nnoremap <Leader>t :ToTimestamp<CR>

" <Leader>v splits the current window vertically
nnoremap <Leader>v <C-w>v
xnoremap <Leader>v <C-w>vgv

" <Leader>x strips trailing whitespace via a custom plugin
nnoremap <Leader>x :StripTrailingWhitespace<CR>
xnoremap <Leader>x :StripTrailingWhitespace<CR>

" <Leader>y copies to the system clipboard
nnoremap <Leader>y  "+y
nnoremap <Leader>Y V"+y
vnoremap <Leader>y  "+y

" <Leader>DEL deletes the current buffer
nnoremap <Leader><Delete> :bdelete<CR>

" <Leader>% uses entire buffer as a linewise object; keeps position
onoremap <Leader>% :<C-U>normal! mZ1GVG<CR>`Z:delm Z<CR>

"
" ----- File Type Settings -----
"

let g:netrw_banner=0
