" Register and configure plugins
runtime plugins.vim

" Load filetype settings, plugins and maps
filetype plugin indent on

" Use syntax highlighting
syntax enable

colorscheme gruvbox
set background=dark

" Set default indent settings; tweak on a per-filetype basis
set autoindent    " Use indent of previous line on new lines
set expandtab     " Use spaces instead of tabs
set shiftround    " Indents to multiples of shiftwidth
set shiftwidth=2  " Spaces used for (auto)indent
set smarttab      " Indents by shiftwidth at start of line
set tabstop=2     " Spaces a tab counts for

" Automatically re-read a changed but unedited file
set autoread

" Let me backspace over pretty much anything
set backspace+=eol     " Line breaks
set backspace+=indent  " Spaces from 'autoindent'
set backspace+=start   " The start of current insertion

" Indent wrapped lines if supported
if exists('+breakindent')
  set breakindent
  set cpoptions+=n  " Looks better when using cursorline
endif

" Clear default 'comments' value, let the filetype handle it
set comments=

" Add completion options
if exists('+completeopt')
  set completeopt+=longest  " Insert longest common substring
  set completeopt+=menuone  " Show the menu even if only one match
endif

" Give me a prompt instead of just rejecting risky :write, :saveas
set confirm

" Adjust diff mode settings
set diffopt+=vertical            " Start diff mode using vertical splits
set diffopt+=indent-heuristic    " Use indent heuristic for internal diff engine
set diffopt+=algorithm:patience  " Use patience algorithm for internal diff engine

" Show as much as possible of the last line
set display+=lastline

" Always use UTF-8
set encoding=utf-8

" Set characters used for statuslines and vertical separators
set fillchars=vert:\|,stl:\-,stlnc:\ ,fold:-,diff:┄

" Adjust automatic formatting
set formatoptions+=c  " Wrap comments using 'textwidth'
set formatoptions+=r  " Insert comment leader upon <Enter>
set formatoptions+=j  " Delete comment leaders when joining lines
set formatoptions+=q  " Allow formatting of comments with "gq"
set formatoptions+=n  " Recognize numbered lists
set formatoptions+=l  " Don't break a long lines in insert mode
set formatoptions+=1  " Don't break a line after a one-letter word

" Allow buffers to have changes without being displayed
set hidden

" Keep much more command and search history
set history=2000

" Highlight completed searches
set hlsearch

" Show search matches while typing
set incsearch

" Search ignores case by default; use \C to override
set ignorecase

" Search-and-replace incrementally in-place
if has ('nvim')
  set inccommand=nosplit
endif

" Don't assume I'm editing C; let the filetype handle it
set include=

" Don't join lines with two spaces at the end of sentences
set nojoinspaces

" Always show a statusline, even with just one window
set laststatus=2

" Don't redraw the screen during batch execution
set lazyredraw

" Break lines at word boundaries
set linebreak

" Enable and define extra 'list' display characters
set list
set listchars-=eol:$       " Remove default eol entry
set listchars+=extends:>   " Unwrapped text to screen right
set listchars+=precedes:<  " Unwrapped text to screen left
set listchars+=tab:›\      " Tab characters, preserve width
set listchars+=trail:·     " Trailing spaces
set listchars+=nbsp:·      " Non-breaking spaces

" Enable usage of the mouse in all modes
set mouse=a

" Treat numbers with a leading zero as decimal, not octal
set nrformats-=octal

" Don't show line numbers by default; more screen real estate
set nonumber

" Toggle 'paste' mode to insert a copied piece of text literally
set pastetoggle=<F3>

" Options for file search with gf/:find
set path-=/usr/include  " Let the C/C++ filetypes set that
set path+=**            " Search current directory's whole tree

" Show file position in command line
set ruler

" Always show at least a couple of lines of context
set scrolloff=5

" Make sessions usable
if exists('+sessionoptions')
  set sessionoptions-=localoptions  " No buffer options or mappings
  set sessionoptions-=options       " No global options or mappings
endif

" Indicator to use at beginning of wrapped rows
let &showbreak='↳ '

" Show command while I'm typing it
set showcmd

" Show matching bracket briefly upon insert
set showmatch

" Show mode I'm in at the bottom of the screen
set showmode

" Scroll at least a couple of columns horizontally
set sidescroll=5
set sidescrolloff=1

" Searches are case-sensitive when containing a case
set smartcase

" New windows go below or to the right of a split
set splitright
set splitbelow

" Recognize hidden tags files as well
set tags +=./.tags,.tags

" Break lines longer than 79 characters
set textwidth=79

" Disable timeout; I don't like having to wait
set notimeout

" Enable timeout on key codes; <esc> exits Insert mode quickly
set ttimeout
set ttimeoutlen=50

" Shorter delay for writing to swap file
set updatetime=250

" Wildmenu settings; see also plugin/wildignore.vim
set wildmenu               " Use wildmenu
set wildmode=list:longest  " Tab press completes and lists
set wildignorecase         " Case insensitive
set wildcharm=<C-z>        " Set for use in mappings to invoke completion

" By default don't open files with line-wrapping
set nowrap

" Searches wrap around the end of the file
set wrapscan

" open help vertically
command! -nargs=* -complete=help Help vertical belowright help <args>

"
" "----- Key mappings -----
"

" Comma becomes the new leader
let mapleader=","
let maplocalleader="\\"

" Turn the word under the cursor into a UTC-timestamp
"
" 1. delete inner word into 'z' register
" 2. ??? 'norm i'
" 3. Execute a system command to transform the contents of the z-register to
"    a UTC timestamp.

" Transform the word under the cursor into a UTC-timestamp.
noremap <silent> <Leader>t "zdiw:exe 'norm i' . system("echo <C-R>z \| cut -c1-10 \| TZ=UTC xargs date -R -r")<CR>kJx

" Transform the word under the cursor into a duration (in seconds).
noremap <silent> <Leader>s "zdiw:exe 'norm i' . system("printf '%.3f\n' `echo 'scale=3;<C-R>z/1000000000' \| bc`")<CR>kJx

" Let space function as colon
map <Space> :

" Prevents from going into Ex-mode accidentally
nnoremap Q <Nop>

" Exit insert-mode easily
inoremap jj <ESC>

" When wrapping is on, move cursor by displayed lines instead of file lines
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Make < and > keep the selection
vnoremap < <gv
vnoremap > >gv

" Use . in visual mode
vnoremap . :norm.<CR>

" Use sudow when trying to save a file without sufficient privileges
cnoremap w!! w !sudo tee > /dev/null %

" Clear the highlighting of :set hlsearch
" nnoremap <silent> <Esc> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

"
" ----- File Type Settings -----
"

au BufNewFile,BufRead *.yml,*.yaml setlocal expandtab ts=2 sw=2
au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
au BufNewFile,BufRead *.yml.tpl setlocal syntax=yaml

au FileType gitcommit setlocal nolist spell
au FileType gitconfig setlocal noet ts=4 sw=4
au FileType vim setlocal keywordprg=:Help
au FileType sh setlocal noet ts=4 sw=4
au FileType markdown setlocal expandtab ts=4 sw=4 sts=4

au BufWritePre *.sql :%s/\s\+$//e

" TODO move to different section

autocmd WinEnter * stopinsert
autocmd VimResized * wincmd =

let g:netrw_banner=0
